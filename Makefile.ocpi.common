# This file is protected by Copyright. Please refer to the COPYRIGHT file
# distributed with this source distribution.
#
# This file is part of OpenCPI <http://www.opencpi.org>
#
# OpenCPI is free software: you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# OpenCPI is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

ifndef MAKEFILE_OCPI_COMMON
MAKEFILE_OCPI_COMMON:=1
include $(OCPI_CDK_DIR)/include/util.mk
OcpiDir=$(foreach d,$1,$(patsubst %/,%,$(dir $1)))

MAIN_LDFLAGS=$(LDFLAGS)
# Here we define the preprocessor definitions that tell the
# source code about the compilation environment
# We use "platform" rather than "arch" so that it can be more specific than
# just the cpu of the compilation someday
# The OCPI prefix on the OCPI_OS preprocessor variable is to avoid the namespace collision
# of the symbol "linux", in g++ on linux.
TARGET_CPPFLAGS=\
  -DOCPI_OS_$(OCPI_TARGET_OS) \
  -DOCPI_OS=OCPI$(OCPI_TARGET_OS) \
  -DOCPI_OS_VERSION_$(OCPI_TARGET_OS_VERSION) \
  -DOCPI_OS_VERSION=$(OCPI_TARGET_OS_VERSION) \
  -DOCPI_PLATFORM_$(OCPI_TARGET_PLATFORM) \
  -DOCPI_PLATFORM=$(OCPI_TARGET_PLATFORM) \
  -DOCPI_ARCH_$(OCPI_TARGET_ARCH) \
  -DOCPI_ARCH=$(OCPI_TARGET_ARCH) \
  -DOCPI_DEBUG=$(OCPI_DEBUG) \
  -DOCPI_DYNAMIC=$(OCPI_BUILD_SHARED_LIBRARIES)
CFLAGS += $(TARGET_CPPFLAGS)
# these are in ocpisetup.mk
CXXFLAGS += $(TARGET_CPPFLAGS)

PREQLIBS=gmp lzma
#
# ----------------------------------------------------------------------
# The rest should work.
# ----------------------------------------------------------------------
#

ifeq ($(OCPI_ASSERT),0)
ALLDEFS += NDEBUG
endif

ifeq ($(findstring Cygwin,$(shell uname -a)),Cygwin)
# Assume that we're using Cygwin's make
MKDEPENDFLAGS += --pathtype cygwin
else
ifeq ($(findstring Msys,$(shell uname -a)),Msys)
# Assume that we're using Msys' make
MKDEPENDFLAGS += --pathtype mingw
endif
endif

ifneq ($(filter linux macos,$(OCPI_TARGET_OS)),)
#
# Unix compile-time configuration
#

xxMAIN_DRIVERS=\
  _ZN4OCPI3API12ExternalPortD0Ev \
  _ZN12DataTransfer22createHostSmemServicesERNS_8EndPointE

OCPI_DRIVERS=hdl rcc ocl pio dma socket remote ofed

# When linking main programs, allow dynamic libraries to have undefined symbols since
# we don't want to care about indirect depenedencies.
# Those dynamic libraries check their undefines against other dynamic libraries when
# they are created

ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),1)
  MAIN_LDFLAGS+= \
    $(foreach l,$(PREQLIBS), \
      -Xlinker -rpath -Xlinker $(OCPI_PREREQUISITES_DIR)/$l/$(OCPI_TARGET_DIR)/lib)
endif

# The library search for the executables have to deal with three different scenarios
# Note that symbolic links are followed *BEFORE* ORIGIN is set.
# 1. The development tree scenario, where the libraries might be in the same directory
#    And also an easy way to override: drop it in the same bin directory
# 2. The installation where multiple targets are present
# 3. The installation where only one target is present (deployed)
# 4. The development tree location via OCPI_CDK_DIR

MAIN_LDFLAGS+= \
  -Xlinker -rpath -Xlinker '$(RPATH_ORIGIN)' \
  -Xlinker -rpath -Xlinker '$(strip $(if $(OCPI_USE_TARGET_MODES),\
                                      $(RPATH_ORIGIN)/../../../lib/$(OCPI_TARGET_DIR), \
                                      $(RPATH_ORIGIN)/../../lib/$(OCPI_TARGET_HOST)))' \
  -Xlinker -rpath -Xlinker '$(RPATH_ORIGIN)/lib' \
  -Xlinker -rpath \
  -Xlinker '$(RPATH_ORIGIN)/$(call FindRelative,$(OBJDIR),$(OCPI_CDK_DIR))/lib/$(OCPI_TARGET_DIR)' \
  $(foreach o,$(MAIN_DRIVERS), $(call UNDEFINED_FLAG,$o))

#$(LD_ALLOW_UNDEFINED)

ifeq ($(OCPI_TARGET_OS),macos)
  SO=dylib
  LD_ALLOW_UNDEFINED=-Xlinker -undefined -Xlinker dynamic_lookup
  SHARED_ALLOW_UNDEFINED=-dynamiclib $(LD_ALLOW_UNDEFINED) -install_name @rpath/$(notdir $@)
  RPATH_ORIGIN=@executable_path
  #MACSTDLIB=-stdlib=libstdc++
  SHARED= $(MACSTDLIB) -dynamiclib -install_name @rpath/$(notdir $@)
  UNDEFINED_FLAG=-Xlinker -u -Xlinker _$1
  BASICLIBS=
  CXXFLAGS += $(MACSTDLIB) -Wall -Wsequence-point  -Wparentheses -Wempty-body -Wformat-security \
              -Wformat -Wunused-variable -Wunused-parameter -Wsign-compare -Wno-dangling-else \
              -Wno-logical-op-parentheses \

#	      -Wfloat-equal -Wextra -fno-strict-aliasing -Wuninitialized -Winit-self -Wshadow \
#	      -Wno-conversion -Wsign-conversion -Wconversion

  # -Wuninitialized only usable with -O
  # not available on -Wunused-but-set-variable -Wignored-qualifiers -Wconversion-null -Wint-to-pointer-cast
  #CXXFLAGS += -Wall
  # CXXFLAGS += -mdynamic-no-pic ideally do this for main programs...
  EXTRA_LDFLAGS=$(MACSTDLIB)
else
  RPATH_ORIGIN=$${ORIGIN}
  MAIN_LDFLAGS+= -rdynamic
  UNDEFINED_FLAG=-Xlinker -u -Xlinker $1
  ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),1)
    LD_ALLOW_UNDEFINED=-Xlinker --allow-shlib-undefined -Xlinker --warn-unresolved-symbols
    SHARED_ALLOW_UNDEFINED=-shared -Xlinker -soname=$(@F)
    SHARED=-shared -Xlinker --no-undefined -Xlinker -soname=$(@F)
    CFLAGS += -fPIC
    CXXFLAGS += -fPIC -Wall
  else
    LD_ALLOW_UNDEFINED=-Xlinker --warn-unresolved-symbols
    ifdef MAIN_DYNAMIC_LIST
       MAIN_LDFLAGS+=--dynamic-list=$(MAIN_DYNAMIC_LIST)
    endif
    # This forces everything to be static, and some libraries aren't available (-ldl).
    #MAIN_LDFLAGS+=-static
    #MAIN_LDFLAGS+=-Xlinker --gc-sections
  endif
  SO=so
endif
# This allows us to make OpenCPI librarys different (static vs. dynamic) than system libs
OCPI_LIBS=$(PRE_OCPI_LIBS) $(addprefix -locpi_,$(notdir $(ALLLIBS))) $(POST_OCPI_LIBS)
ifeq ($(OCPI_CROSS_HOST),)
CC = gcc
CXX = c++
LD = c++
else
CC = $(OCPI_CROSS_BUILD_BIN_DIR)/$(OCPI_CROSS_HOST)-gcc
CXX = $(OCPI_CROSS_BUILD_BIN_DIR)/$(OCPI_CROSS_HOST)-c++
LD = $(OCPI_CROSS_BUILD_BIN_DIR)/$(OCPI_CROSS_HOST)-c++
AR = $(OCPI_CROSS_BUILD_BIN_DIR)/$(OCPI_CROSS_HOST)-ar
endif

MKDEPENDFLAGS += --xpattern "/usr"

ifneq ($(OCPI_CROSS_HOST),)
MKDEPENDFLAGS += --xpattern "$(OCPI_CROSS_HOST)"
endif

ifeq ($(findstring timesys,$(OCPI_CROSS_BUILD_BIN_DIR)),timesys)
MKDEPENDFLAGS += --xpattern "timesys"
endif

ifeq ($(OCPI_TARGET_OS),macos)
CFLAGS+=-DMACOS
CXXFLAGS+=-DMACOS -D_DARWIN_C_SOURCE
endif

ifeq ($(OCPI_DEBUG),1)
CFLAGS += -g
CXXFLAGS += -g
LDFLAGS += -g
OCPI_SHARED_LIBRARIES_FLAGS+=-g
else
CFLAGS += -O3 -g
CXXFLAGS += -O3 -g
LDFLAGS += -g
OCPI_SHARED_LIBRARIES_FLAGS+=-g
endif

ifeq ($(OCPI_TARGET_OS),linux)
# Linux libraries
BASICLIBS = -lpthread -lrt -ldl
#ifeq ($(OCPI_BUILD_SHARED_LIBRARIES),1)
#BASICLIBS += -ldl
#endif
else ifneq ($(OCPI_TARGET_OS),macos)
# Solaris libraries
BASICLIBS = -lpthread -lsocket -lnsl -lrt
endif

.SUFFIXES : .asm .cpp .cxx .c .obj .exe .lib .idl .d

$(OBJDIR)/%.obj : %.asm
	$(CC) -c -o "$@" $(ASMFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.c
	$(CC) -c -o "$@" $(CFLAGS) -MMD -MP -MF "$@.deps" \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

$(OBJDIR)/%.obj : %.cxx
	$(CXX) -c -o "$@" $(CXXFLAGS) -MMD -MP -MF "$@.deps" \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"


$(OBJDIR)/%.obj : %.cpp
	$(CXX) -c -o "$@" $(CXXFLAGS) \
		$(patsubst %,-D%=1,$(ALLDEFS)) \
		$(addprefix -I,$(ALLINC)) \
		"$<"

# what library should we be depending on
# -- drivers are always dynamic
# -- they will be in the mode subdir if we are using modes
LIBDEPSUFFIX=$(if $(filter 0,$(OCPI_BUILD_SHARED_LIBRARIES)),a,$(SO))
LIBDEP=$(foreach l,$(notdir $1),$(infox l is $l)\
         $(foreach n,$(if $(and $(filter $l,$(OCPI_DRIVERS)),\
                                $(filter 0,$(OCPI_BUILD_SHARED_LIBRARIES))),\
	                 $l_s,$l),$(infox n is $n)\
           $(foreach d,$(dir $1),$(infox d is $d)\
             $(foreach s,$(if $(filter $l,$(OCPI_DRIVERS)),\
                           $(SO),$(LIBDEPSUFFIX)),$(infox s is $s)\
	       $(foreach x,$(if $(filter $l,$(OCPI_DRIVERS)),\
                             $(if $(OCPI_TARGET_MODE),\
                               $(dir $(OCPI_OUT_DIR))/d$(if $(filter 1,$(OCPI_DEBUG)),d,o),\
                               $(OCPI_OUT_DIR)),\
                             $(OCPI_OUT_DIR)),$(infox x is $x)\
                 $(foreach z,$d$x/libocpi_$n.$s,$(infox ZZZ $l->$z:($(OCPI_OUT_DIR)))$z))))))

PREQDEP=$(foreach d,$(OCPI_PREREQUISITES_DIR)/$1/$(OCPI_TARGET_DIR)/lib,$(infox d is $d)\
	   $(foreach s,$(if $(filter 0,$(OCPI_BUILD_SHARED_LIBRARIES)),a,$(SO)),\
	     $(foreach l,$d/lib$1.$s,$(infox PREQDEP: $1 -> $l)$l)))
 
LIBDEPDIR=$(strip \
            $(foreach l,$(notdir $1),$(infox l is $l)\
              $(foreach d,$(dir $1),$(infox d is $d)\
	        $(foreach x,$(if $(and $(filter $l,$(OCPI_DRIVERS)),$(OCPI_TARGET_MODE)),\
                               $(dir $(OCPI_OUT_DIR))d$(if $(filter 1,$(OCPI_DEBUG)),d,o),\
                               $(OCPI_OUT_DIR)),$(infox x is $x)\
                  $(foreach z,$d$x,$(infox YYY $l->$z:($(OCPI_OUT_DIR)))$z)))))

$(OBJDIR)/%.exe : $(OBJDIR)/%.obj $(DYNOBJS)
	$(LD) $(MAIN_LDFLAGS) -o "$@"\
	        $(infox OS:$(OBJDIR):MO:$(MAINOBJS):UL:$(UNIXLIB):DEPS:$^) $(infox MO:$(MAINOBJS)) $(infox DO: $(DYNOBJS)) \
		$(filter %_main.obj,$^) \
		$(MAINOBJS) \
	        $(if $(MAINOBJS),,$(OBJDIR)/$(notdir $(if $(filter 0,$(OCPI_BUILD_SHARED_LIBRARIES)),$(UNIXLIB),$(UNIXSHLIB)))) \
		$(foreach l,$(ALLLIBS),$(call LIBDEP,$l)) \
	 	$(foreach p,$(PREQLIBS),$(call PREQDEP,$p)) \
		$(addprefix -L,$(call OcpiDir,$(SYSLIBS)) $(SYSLIBDIRS)) \
		$(addprefix -l,$(notdir $(SYSLIBS))) \
		$(BASICLIBS)

#		$(foreach l,$(ALLLIBS),-L$(call LIBDEPDIR,$l)) \
#		$(addprefix -L,$(call OcpiDir,$(SYSLIBS)) $(SYSLIBDIRS)) \
#		$(OCPI_LIBS) \

endif

#
# OCPI_CORBA_ORB configuration
#

ifeq ($(OCPI_HAVE_CORBA),1)

ifeq ($(OCPI_CORBA_ORB),TAO)

IDL = TAO_ROOT="$(TAO_ROOT)" TAO_IDL_PREPROCESSOR="$(CC)" $(TAO_BIN)/tao_idl

ALLIDLINC = $(TAO_INC) $(TAO_INC)/tao

IDLOPTS = -ss _s.cxx -cs _c.cxx -hc .h -hs _s.h -ci .inl -si _s.inl -H binary_search

ifeq ($(OCPI_TARGET_OS),linux)
LD_LIBRARY_PATH := $(LD_LIBRARY_PATH):$(ACE_LIB)
export LD_LIBRARY_PATH
endif

ifeq ($(CLIENT_IDL_ONLY),1)
IDLOPTS += -Ssi -Ssc
endif

ifeq ($(TAO_DEBUG),1)
TAOLIBINFIX = d
else
TAOLIBINFIX =
endif

TAOINCDIRS = $(ACE_INC) $(TAO_INC) $(TAO_INC)/orbsvcs

TAODALIBS = $(TAO_LIB)/TAO_DynamicAny$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_IFR_Client$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_TypeCodeFactory$(TAOLIBINFIX)

#
# The following libraries need to be added for TAO 1.4.8
#

TAOBASELIBS += $(TAO_LIB)/TAO_CosNaming_Skel$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_CosNaming$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_AnyTypeCode$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_CodecFactory$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_PortableServer$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO_IORTable$(TAOLIBINFIX) \
	$(TAO_LIB)/TAO$(TAOLIBINFIX) \
	$(ACE_LIB)/ACE$(TAOLIBINFIX)

  ALLDEFS += OCPI_USES_TAO
  ORBINCDIRS = $(TAOINCDIRS)
  ORBLIBDIRS = $(TAOLIBDIRS)
  ORBLIBS += $(TAOBASELIBS)

MKDEPENDFLAGS += \
	--xpattern ACE_wrappers \
	--xpattern $(ACE_INC)/ace \
	--xpattern $(TAO_INC)/tao \
	--xpattern $(ORBSVCS)

endif # End: ifeq ($(OCPI_CORBA_ORB),TAO)

ifeq ($(OCPI_CORBA_ORB),OMNI)
  IDL=$(OCPI_BASE_DIR)/scripts/run_omniidl.csh
  IDLOPTS=
  ALLDEFS += OCPI_USES_OMNI
  ORBINCDIRS = $(OCPI_OMNI_INCLUDE_DIR)
  ORBLIBS = $(OCPI_OMNI_LIBRARY_DIR)/omniORB4 $(OCPI_OMNI_LIBRARY_DIR)/omniDynamic4 $(OCPI_OMNI_LIBRARY_DIR)/omnithread $(OCPI_OMNI_LIBRARY_DIR)/COS4 $(OCPI_OMNI_LIBRARY_DIR)/COSDynamic4\

endif # End: ifeq ($(OCPI_CORBA_ORB),OMNI)

endif # End: ifeq ($(OCPI_HAVE_CORBA),1)

%_c.cxx %.h %_s.cxx %_s.h : %.idl
	$(IDL) $(IDLOPTS) $(patsubst %,-I%,$(ALLIDLINC)) "$<"

%.d : %.idl
	$(IDL) -E $(patsubst %,-I%,$(ALLIDLINC)) "$<" | \
	$(MKDEPEND) \
		--srcfile "$<" \
		--target "$(patsubst %.idl,%.h,$<)" \
		--target "$(patsubst %.idl,%_c.cxx,$<)" \
		--target "$(patsubst %.idl,%_s.h,$<)" \
		--target "$(patsubst %.idl,%_s.cxx,$<)" \
		--target "$(patsubst %.idl,%.d,$<)" \
		$(MKDEPENDFLAGS) \
		-o "$@"

#
# SCA configuration
#

ifeq ($(SCAVERSION),2.2.2)
ALLDEFS += OCPI_USES_SCA222
else
ifeq ($(SCAVERSION),2.2)
ALLDEFS += OCPI_USES_SCA22
else
$(error Unknown SCA version "$(SCAVERSION)")
endif
endif


#
# Generic compile-time configuration
#

cleanup:
	-rm -f *vxdkm-ctdc* *.vxe *.exe *.obj *.out *.map *.o *.so *.dylib *.ilk *.sbr *.suo *.sln *.pdb *.bsc core* *~ *.d

distcleanup:	cleanup
	-rm -f *.d *.cdb *.inl

#
# Package exported include files.
#
# For the _LIBS variables, the last path component is the library's base
# name, which will be rewritten appropriately.
#

#if 0
OCPI_EXTERNAL_EXPORTS = \
	$(OCPI_BASE_DIR)/runtime/util/misc/include \
	$(OCPI_BASE_DIR)/runtime/util/driver/include \
	$(OCPI_BASE_DIR)/runtime/dataplane/rdma_drivers/pio/include \
	$(OCPI_BASE_DIR)/runtime/dataplane/rdma_driver_interface/interfaces/include 
#endif


OCPIOS_EXPORTS = $(OCPI_BASE_DIR)/os/interfaces/include
OCPIOS_LIBS = $(OCPI_BASE_DIR)/os/os

APPLICATION_EXPORTS = \
	$(OCPI_BASE_DIR)/runtime/application/include

LIBRARY_EXPORTS = \
	$(OCPI_BASE_DIR)/runtime/library/include

DATA_TRANSFER_EXPORTS = \
	$(OCPI_BASE_DIR)/runtime/dataplane/xfer/base/include \

MSG_TRANSPORT_EXPORTS = \
	$(OCPI_BASE_DIR)/runtime/dataplane/msg_driver_interface/include \
	$(OCPI_BASE_DIR)/runtime/dataplane/msg_driver_interface/client_server/include

DATA_TRANSFER_LIBS = \
   $(OCPI_BASE_DIR)/runtime/dataplane/xfer/base/xfer \

DATA_TRANSFER_DRIVER_LIBS = $(OCPI_BASE_DIR)/runtime/dataplane/rdma_drivers/rdma_drivers \

MSG_TRANSPORT_LIBS = $(OCPI_BASE_DIR)/runtime/dataplane/msg_driver_interface/msg_driver_interface

# TX_DRIVER_SUPPORT_LIBS = $(OCPI_BASE_DIR)/runtime/dataplane/rdma_smb/rdma_smb

DATA_TRANSPORT_EXPORTS = \
	$(OCPI_BASE_DIR)/runtime/dataplane/transport/interface/include \
	$(OCPI_BASE_DIR)/runtime/dataplane/transport/impl/include \
	$(OCPI_BASE_DIR)/runtime/dataplane/transport/ddnp/include

DATA_TRANSPORT_LIBS = $(OCPI_BASE_DIR)/runtime/dataplane/transport/transport


CONTAINER_EXPORTS = \
	$(OCPI_BASE_DIR)/runtime/container/include \
	$(OCPI_BASE_DIR)/runtime/ocl/include \
	$(OCPI_BASE_DIR)/runtime/remote/include \
	$(OCPI_BASE_DIR)/runtime/remote-support/include \
	$(OCPI_BASE_DIR)/runtime/rcc/include

HDL_CONTAINER_EXPORTS = \
	$(OCPI_BASE_DIR)/runtime/hdl/include

OCL_CONTAINER_EXPORTS = \
	$(OCPI_BASE_DIR)/runtime/ocl/include

CONTAINER_LIBS = \
	$(OCPI_BASE_DIR)/runtime/container/container

APPLICATION_LIBS = \
	$(OCPI_BASE_DIR)/runtime/application/application

LIBRARY_LIBS = \
	$(OCPI_BASE_DIR)/runtime/library/library

RCC_CONTAINER_LIBS = \
	$(OCPI_BASE_DIR)/runtime/rcc/rcc

HDL_CONTAINER_LIBS = \
	$(OCPI_BASE_DIR)/runtime/hdl/hdl

OCL_CONTAINER_LIBS = \
	$(OCPI_BASE_DIR)/runtime/ocl/ocl

REM_CONTAINER_LIBS = \
	$(OCPI_BASE_DIR)/runtime/remote/remote

REM_SUPPORT_LIBS = \
	$(OCPI_BASE_DIR)/runtime/remote-support/remote-support

ALL_CONTAINER_LIBS = \
        $(REM_CONTAINER_LIBS) \
	$(RCC_CONTAINER_LIBS) \
	$(HDL_CONTAINER_LIBS) \

ifeq ($(OCPI_HAVE_OPENCL),1)
ALL_CONTAINER_LIBS += $(OCL_CONTAINER_LIBS)
endif

LOGGER_EXPORTS = $(OCPI_BASE_DIR)/runtime/util/logger/include
#LOGGER_LIBS = $(OCPI_BASE_DIR)/runtime/local/logger/logger

FOREIGN_EXPORTS = \
	$(OCPI_BASE_DIR)/runtime/foreign/fasttime/include \
	$(OCPI_BASE_DIR)/runtime/foreign/uuid/include \
	$(OCPI_BASE_DIR)/runtime/foreign/zlib/include \
	$(OCPI_BASE_DIR)/runtime/foreign/md5/include \
	$(OCPI_BASE_DIR)/runtime/foreign/farmhash/include \
	$(OCPI_BASE_DIR)/runtime/foreign/pwq/include \

FOREIGN_LIBS = $(OCPI_BASE_DIR)/runtime/foreign/foreign

UTIL_EXPORTS = $(FOREIGN_EXPORTS) \
	$(OCPI_BASE_DIR)/runtime/util/driver/include \
	$(OCPI_BASE_DIR)/runtime/util/expressionP/include \
	$(OCPI_BASE_DIR)/runtime/util/ezxml/include \
	$(OCPI_BASE_DIR)/runtime/util/filefs/include \
	$(OCPI_BASE_DIR)/runtime/util/http/include \
	$(OCPI_BASE_DIR)/runtime/util/ior/include \
	$(OCPI_BASE_DIR)/runtime/util/memfs/include \
	$(OCPI_BASE_DIR)/runtime/util/misc/include \
	$(OCPI_BASE_DIR)/runtime/util/parentChild/include \
	$(OCPI_BASE_DIR)/runtime/util/property/include \
	$(OCPI_BASE_DIR)/runtime/util/streamfs/include \
	$(OCPI_BASE_DIR)/runtime/util/tcp/include \
	$(OCPI_BASE_DIR)/runtime/util/timeEmit/include \
	$(OCPI_BASE_DIR)/runtime/util/vfs/include \
	$(OCPI_BASE_DIR)/runtime/util/zipfs/include \
	$(OCPI_BASE_DIR)/runtime/util/res/include \
	$(OCPI_BASE_DIR)/runtime/util/list/include \
	$(OCPI_BASE_DIR)/runtime/util/thread/include \
	$(OCPI_BASE_DIR)/runtime/util/sockets/include \
	$(OCPI_BASE_DIR)/runtime/util/assembly/include \
	$(OCPI_BASE_DIR)/runtime/util/logger/include \

UTIL_LIBS = $(OCPI_BASE_DIR)/runtime/util/util \
  $(FOREIGN_LIBS)

CDKUTILS_EXPORTS = $(OCPI_BASE_DIR)/tools/cdkutils/include
CDKUTILS_LIBS = $(OCPI_BASE_DIR)/tools/cdkutils/cdkutils

ifeq ($(SCAVERSION),2.2)
ORB_SERVICES_EXPORTS = $(OCPI_BASE_DIR)/runtime/corba/orb_services/cf22log/idl
else
ORB_SERVICES_EXPORTS = $(OCPI_BASE_DIR)/runtime/corba/orb_services/lwlog/idl
endif

ORB_SERVICES_EXPORTS += \
	$(OCPI_BASE_DIR)/runtime/corba/orb_services/corba/include \
	$(OCPI_BASE_DIR)/runtime/corba/orb_services/naming/idl \
	$(OCPI_BASE_DIR)/runtime/corba/orb_services/event/idl
ORB_SERVICES_LIBS = $(OCPI_BASE_DIR)/runtime/corba/orb_services/orb_services

CORBA_UTIL_EXPORTS = $(OCPI_BASE_DIR)/runtime/corba/corba_util/misc/include
CORBA_UTIL_LIBS = $(OCPI_BASE_DIR)/runtime/corba/corba_util/corba_util

ifeq ($(SCAVERSION),2.2)
SCA_CF_EXPORTS = $(OCPI_BASE_DIR)/runtime/sca/cf/cf22/idl
else
SCA_CF_EXPORTS = $(OCPI_BASE_DIR)/runtime/sca/cf/cf222/idl
endif

SCA_CF_LIBS = $(OCPI_BASE_DIR)/runtime/sca/cf/cf

CF_UTIL_EXPORTS = \
	$(OCPI_BASE_DIR)/runtime/sca/cf_util/misc/include \
	$(OCPI_BASE_DIR)/runtime/sca/cf_util/device_base/include \
	$(OCPI_BASE_DIR)/runtime/sca/cf_util/vfs/include
CF_UTIL_LIBS = $(OCPI_BASE_DIR)/runtime/sca/cf_util/cf_util


#WCI_API_BASE = $(OCPI_BASE_DIR)/runtime/control/wci_api
#WCI_API_EXPORTS = $(WCI_API_BASE)/interface/include \
#	$(WCI_API_BASE)/rpl/include \
#	$(WCI_API_BASE)/api/include
#WCI_API_LIBS = $(WCI_API_BASE)/wci_api

TEST_FRAMEWORK_LIBS = $(OCPI_BASE_DIR)/tests/framework/framework/framework

TEST_OS_LIBS = $(OCPI_BASE_DIR)/tests/facilities/test_os/test_os
TEST_LOGGER_LIBS = $(OCPI_BASE_DIR)/tests/facilities/test_logger/test_logger

TEST_LIBS = \
	$(TEST_OS_LIBS) \
	$(TEST_LOGGER_LIBS) 

#$(info OD:$(OCPI_OUT_DIR) CC:$(CC))
endif
