This directory contains the autotools-based configuration and build process.
In particular it leverages three things from autotools:

- A single global generated makefile for maximum performance with -j, generated by automake
- libtool's ability to create various types of libaries and manage compilation in various modes.
- autoconf's library of environment and compiler testing capabilities

The authored/manually created and maintained contents of this directory are:
----------------------------------------------------------------------------

imported/    - Files (autoconf macros) manually imported from elsewhere, see imported/README

Makefile     - a top level Makefile that drives the autotools configuration and build process,
               which is not the result of running autotools, but which runs autotools.
	       The per-platform generated Makefiles are in platform-specific directories.
               For platform-specific steps, takes a list of platforms.
             
do-platform.mk - an internal Makefile to do platform specific steps for a single platform.

configure.ac - the authored (not generated) top level autoconf script for this system

ocpi-config-platform.h.in - the template for the platform-specific generated header file
                            which is in addition to the generated ocpi-config.h, 
			    which needs no template since autoheader generates the template.

generate-automake.sh      - the script for generating the automake Makefile.am template
                            for all the per-platform generated Makefiles.
			    The input is in the build-system-agnostic file ../places

ocpi-config-platform.h.in - the template for the ocpi-config-platform.h file created during
                            platform-specific configuration

install-data-hook.sh      - the script run during the autotools "make install" phase to fixup
                            the library references from executables and dynamic libraries.

Note several authored files are used from the directory above this.  Such files are not
here since they are build-system-agnostic.  E.g. "places" and "platform-defaults.mk".

The automatically generated/created contents of this directory are:
-------------------------------------------------------------------

generated/ - The generated (from scratch) platform-*agnostic* autotools work area that enables
             the subsequent creation of platform-*specific* configuration and build directories
	     (target-*).

target-<platform>/ - The platform-specific configuration and build directory, separate from, but
                     isomorphic with, the source tree.  <platform> can include build options

The autotools-based configuration process
-----------------------------------------

This process is set up to be driven by the top level "make", thus the "user interface"
is currently just using "make" with various goals and variables.  A syntactic sugar-coating
could easily make it a CLI script with options and verbs.

Starting from a clean tree the steps (and make goals) are:

1. preconfigure: (platform agnostic)
=================================

This goal is very similar to what many autotools projects implement with a script called
"bootstrap.sh" or "reconf".  It in fact calls the autotools "autoreconf" command under the
covers to do the bulk of the typical autotools setup work prior to platform-specific
configuration.  It is executed by typing "make preconfigure".

This process creates and populates a subdirectory called "generated", whose entire contents
is always automatically generated.  The generated/ directory's contents look a lot like
a native "autotools" project, with its mix of "authored" files and "generated" files.
It is designed and structured for "out-of-source-tree" or "VPATH mode" builds as described
in the autotools documentation.  It is not called "gen" to avoid some automatic cleaning of
directories called gen/.  It contains symbolic links to authored files to make them appear
in this "autotools work area directory" while retaining the ability to nuke this directory.

In addition to simply populating this configuration work area prior to calling autoreconf,
a script is run to generate the Makefile.am file from a build-system-agnostic library
description file in ../places.  See comments in that file for its syntax and semantics.

This step is platform agnostic.  It is done once, before any platforms are contemplated
or configured for building.  It "prepares for subsequent platform-specific configuration".

Inputs:
  ../places - describes source tree, processed by generate-automake.sh script
  ../platform-defaults.mk - processed for (at least) the optional-warnings.m4 file
  configure.ac - processed by autoreconf
  imports/* - various not-built-in-to-autoconf autoconf macros
Intermediate Files: (generated and then used here)
  generated/optional-warnings.m4 - to allow autoconf to know about optional compiler warnings
  generated/Makefile.am - from generate-automake and used by autoreconf to make Makefile.in
Outputs: (used by later steps, all in the generated/ subdirectory)
  configure - used as the configure script for platform-specific configuration
  Makefile.in - the template for platform-specific Makefiles, output from automake.
  config.h.in - the autoconf-generated template for the platform-specific ocpi-config.h file
  various internally and automatically populated autotools files and directories -
                autom4te.cache, build-aux, aclocal.m4, acinclude  
  

2. configure: (platform-specific)
=================================

This goal is very similar to the generic "../configure" step in an typical autotools
project using "VPATH mode" or "VPATH builds".  It creates a platform-specific subdirectory,
target-<platform> in which the configuration and building happens for that platform.
See section "16.3 Compiling For Multiple Architectures" in the autoconf manual.

This (and other platform-specific) goal allows you to set the "Platforms" variable on the make
command line.  If it is not set, the currently running platform is implied.  If the variable is
set, it can be used to specify a cross-compiled platform.  In any case there must be an OpenCPI
RCC platform definition for the platform.  Non-cross-compiled and cross-compiled platforms may
be mixed.  Each "platform" may have a build-options suffix for non-default build options.

Configuring for cross compilation software platforms is no different except that
some configuration tests that require executing on the platform are not performed.

This step:

1. creates the target-<platform> build-and-configure directory for the targeted platform
2. retrieves platform-specific build information from OpenCPI (whether natively building
   or cross-building)
3. calls ../generated/configure script with the appropriate arguments.

Step #2 creates a file of simple shell platform-related variable assignments that it then
used by "configure" to finish its job.

Inputs:
  ../generated/configure     - the autotools configuration script use to configure platforms
  ../generated/config.h.in   - generated template for the platform-specific ocpi-config.h file
  ../generated/Makefile.in   - the template for the platform-specific Makefile
  ../../platform-defaults.mk - the default values for platform-specific compile/link variables
  */projects/*/rcc/platforms/<platform>/<platform>-target.mk
                             - the platform's compile/build variables as a project asset
  various internally and automatically populated autotools files and directories in ../generated
                autom4te.cache, build-aux, aclocal.m4, acinclude  

Intermediate Files:
  config.*              - used during "configure" and logging its results
  libtool               - a automatically patched/customized version of the global libtool script
  platform-variables.sh - a merged set of make variables from the defaults and the platform
Outputs:
  Makefile               - the actual make file to compile and link the libraries and executables
  ocpi-platform-config.h - header file containing OCPI_* macros with variable names
  ocpi-config.h          - header file which includes ocpi-platform-config.h, with OCPI_* macros
                           whose names are not platform-specific

3. build: (platform-specific)
=============================

This build step is per platform and performed in the target-<platform> directory.
The "build" goal takes the same optional "Platforms" argument as in "configure" above.
This goal simply verifies that the Platforms are valid, and that their directory exists,
and runs "make" in the target directory.  It is just a convenience for that.
It DOES depend on the configure step and will automatically run it.

We do these things that are somewhat at odds with the "spirit" of autotools, on purpose:

1. We depend on the existence of gnumake, not any arbitrary "make" from the 1970s.
2. We do not intentionally support environment variables at any point in this process.
3. We do not intentionally support arbitrary arguments to "configure".
   We support "configure" being used for our specific purposes (including for RPMs)
4. We depend on an initial setup file (in rcc/platforms) for any platform, although if it is
   linux, it inherits default content that is usually sufficient.

3. install: (platform-specific)
===============================

This step uses the term "install" in the autotools sense, and simply post processes the
build artifacts (executables and libraries) into the "staging/" subdirectory under the
target-<platform>/ directory.  The contents of the staging/ directory are essentially the
selected exportable artifacts from the build process.

Post processing is done mostly to de-absolutize the library references and to remove
unneeded and unwanted dynamic library references from executables and libraries as appropriate.

From a higher level "framework" perspective, the "build" and "install" steps are really
one thing to create the exportable content in the staging/ directory.

The "lib" subdirectory of the staging/ directory contains three things:
- static and dynamic libraries
- python files (.c,.pyc,.pyo) for SWIG libraries
- symbolic links to prerequisite libraries.

Inputs:
 - all the build libraries and executables in their autotools-native locations (.libs etc.).
 - the install-data-hook.sh file run by the typical automake/libtool "make install"
Outputs:
 - the staging subdirectory
