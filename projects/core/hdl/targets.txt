--notes about hdl targets--

From a top-down point of view (what to build "everything" for), a given user probably has the platforms and chips they care about.  E.g. andrew has the "webpack"  which only builds for small chips.
So he knows the universe of targets he is interested in.  Other people will know the hardware they target in general.

From a bottom up point of view there is code or cores that is known to be restricted to certain chips and you want to be able to say, at that level, either which targets to build for (only specific ones) or which ones to NOT build for (known problematic/infeasible).

And we basically have this hierarchy chips:

          any portable HDL
       xilinx           altera
  v5 s5 v6 etc.        stratix4 etc.
lx50.   lx240       ....
speeds
packages.

So if we treat this uniformly, it won't seem that complicated.
From a bottom up point of view, we label code according to its anticipated scope, with exclusions:

like: build this for any xilinx chip except lx50 (because that is too small).
or:  build for v5

of course at the platform and app level, we know precisely what we are building for.

So I am thinking of a "HDL target specification dictionary" which basically is just inclusion and exclusion.
You can use the labels that correspond to any level, top down or bottom up.
The result is that stuff gets built at the bottom for the level of specificity they declare, and from top down, you build for any universe you declare.

HDL_TARGETS is for top down, and can specify any level of the hierarchy.
HDL_EXCLUDE_TARGETS is for a level to remove certain targets
HDL_ONLY_TARGETS is for a level to include ONLY these targets
Then our dictionary is simply a hierarchy:
HdlTopTargets=isim xilinx altera verilator
HdlSubTargets_xilinx=virtex5 virtex6

Levels are top, family, part, speed
Hypens separate them.
All things are unique at all levels except speed.

