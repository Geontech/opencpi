<Protocol> 
  <!--
    * This message includes the actual data payload of the protocol. Messages can be from 1 sample to
    * 4092 samples in length.   
  -->
  <Operation name="samples" >
   <Argument name="iq" type="Struct" SequenceLength="4092">
     <Member name="I" type="Short"/>
     <Member name="Q" type="Short"/>
   </Argument>
  </Operation>

  <!--
    * In a receive stream this message is a timestamp for the first sample of the sample message that 
    * directly follows.  In the receive stream this message is generated by the ADC and should be passed 
    * on by all workers in the data stream.  In a transmit stream this message is a requested time to 
    * transmit the samples message that follows it. In a transmit stream this message is generated by 
    * whichever worker is generating data and should be passed on by all workers in the data stream.    
  -->
  <Operation name="time">
   <Argument name="sec" type="ulong"/>
   <Argument name="fract_sec" type="ulong"/>
  </Operation>

  <!--
    * The value that is passed in this operation is the time between samples. This may be used by 
    * workers if they need to calculate the time of a sample that is not the first in a message.  This 
    * operation is generated by the worker that generates data in the data stream. This message    
    * should be passed on by all workers in the data stream. 
  -->
  <Operation name="interval">
   <!-- 1/sample_rate -->
   <Argument name="delta_time" type="ulonglong"/>
  </Operation>

  <!--
    * Used to flush a transmit data chain.  The way this is expected to work is an out of band flush 
    * property will need to be set on a DAC component to tell the DAC to ignore all data until a flush 
    * operation is received in the transmit stream.  The property on the DAC component will be a 
    * boolean that internally to the DAC component will increment a counter and when the flush 
    * operation hits the DAC this counter is decremented.  When the counter non-zero ignore all data 
    * coming in and when is zero output data to the DAC.  This is an advanced option and may not be    
    * used by all applications but this message should be passed on by all workers in the data stream.
  -->
  <Operation name="flush"/>

  <!-- 
    * Used to signify a discontinuity in data.  Filters may need to be reset in this case.  This opcode 
    * would be generated by whichever worker generates the data in the stream.  This is an advanced 
    * option and may not be used by all applications but this message should be passed on by all  
    * workers in the data stream.
  -->
  <Operation name="sync"/>

  <!-- 
    * Used to signify end of data stream, used instead of zero length messages to set all workers in 
    * the stream to done.  This opcode would be generated by whichever worker generates the data in the 
    * stream. This message should be passed on by all workers in the data stream.
  -->
  <Operation name="done" />
</Protocol>
