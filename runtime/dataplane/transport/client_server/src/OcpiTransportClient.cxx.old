/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file
 * distributed with this source distribution.
 *
 * This file is part of OpenCPI <http://www.opencpi.org>
 *
 * OpenCPI is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * OpenCPI is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#include <OcpiTransportClient.h>
#include <OcpiTransport.h>
#include <OcpiMessageCircuit.h>
#include <DtTransferInternal.h>
#include <OcpiOsMutex.h>
#include <OcpiOsMisc.h>
#include <OcpiThread.h>
#include <OcpiCircuit.h>

using namespace OCPI::DataTransport;
namespace OS = OCPI::OS;
using namespace DataTransfer;
using namespace DataTransport::Interface;

int Client::m_count=0;
        
/**********************************
 *  Local init
 **********************************/
void Client::init(SMBResources* res)
{
    // Get our endpoint
    m_end_point = res->sMemServices->endpoint();
    m_transport->setListeningEndpoint( m_end_point );
}

#if 0

class CTransportControl : public OCPI::Util::Thread
{
public:
  friend class Client;

  CTransportControl( Client* client, ClientEventHandler* cb,
		     OCPI::DataTransport::Transport* transport, OS::Mutex* mut)
    : m_client(client),m_cb(cb),m_transport(transport),m_mutex(mut)
  {
  }

  void run() {

    m_mutex->lock ();

    while( m_client->runThreadFlag ) {
      bool someCircuitHadData = false;

      m_transport->dispatch();

      if (m_cb)
	for ( uint32_t n=0; n<m_client->m_circuits.getElementCount(); n++ ) {
	  if ( static_cast<MessageCircuit*>(m_client->m_circuits[n])->messageAvailable() ) {
	    someCircuitHadData = true;
	    m_cb->dataAvailable( static_cast<MessageCircuit*>(m_client->m_circuits[n]) );
	  }
	}

      m_mutex->unlock();

      /*
       * If there is work to do, keep spinning.
       * Otherwise, be Mr. Nice Guy and yield.
       */

      if (!someCircuitHadData) {
        OS::sleep(100);
      }

      m_mutex->lock();
    }

    m_mutex->unlock ();
  }

private:
  Client*                            m_client;
  ClientEventHandler*                m_cb;
  OCPI::DataTransport::Transport*    m_transport;
  OS::Mutex*                         m_mutex;

};
#endif
        
/**********************************
 *  Constructors
 **********************************/
Client::Client( 
                std::string&                   end_point,    
                int                            buffer_size,  
                ClientEventHandler*            cb     

                )
  : m_circuits(0),runThreadFlag(true),
    //    m_event_handler(cb),
    m_buffer_size(buffer_size),
    m_init(false), m_circuit(NULL)
{
    (void)cb;

  OCPI::DataTransport::TransportGlobal *tpg = new OCPI::DataTransport::TransportGlobal(0,(char**)0);
  m_transport = new OCPI::DataTransport::Transport(tpg,true);

  // If we dont have an endpoint, we need to get one
  if ( end_point.length()) {
    m_endpoint_string = end_point;
    init(m_transport->addLocalEndpoint( m_endpoint_string.c_str()));
  }

  // Create our controller
#ifdef CONTAINER_MULTI_THREADED
  m_mutex = new OCPI::OS::Mutex(true);

  m_transport_controller = new CTransportControl(this, cb, m_transport, m_mutex );

  m_transport_controller->start();
#endif        
}


/**********************************
 *  Create a new circuit: return whether we timed out
 **********************************/
#define CLIENT_DEFAULT_BUFFER_SIZE 1024*10
bool Client::connect( std::string& server_end_point, OS::ElapsedTime delay)
{
#if 0
  OCPI::Util::PValue props[] = {OCPI::Util::PVULong("SMBSize",CLIENT_DEFAULT_BUFFER_SIZE),
				OCPI::Util::PVEnd };
#endif
#ifdef CONTAINER_MULTI_THREADED
  m_mutex->lock();
#endif

  OS::Timer timer(delay != 0);
  OS::ElapsedTime et;
  //Make sure we have an endpoint to work with
  if ( m_endpoint_string.length() == 0 ) {
    SMBResources* res = m_transport->findLocalCompatibleEndpoint(server_end_point.c_str());
    m_endpoint_string = res->sMemServices->endpoint()->end_point; 
    init(res);
  }

  MessageCircuit* mc=NULL;
  OCPI::DataTransport::Circuit* send_circuit;
  OCPI::DataTransport::Circuit* rcv_circuit;

  // This class uses whole parrallel / parrallel whole transfers only
  ConnectionMetaData* send_md = 
    new ConnectionMetaData(m_end_point->end_point.c_str(), server_end_point.c_str(), 1, m_buffer_size );

  ConnectionMetaData* rcv_md = 
    new ConnectionMetaData( server_end_point.c_str(), m_end_point->end_point.c_str(), 1, m_buffer_size );

  // Now create the circuit
  char cid[80];
  sprintf( cid, "%s-%d", m_end_point->end_point.c_str(), m_count++);
  try {
    send_circuit = m_transport->createCircuit( cid, send_md, NULL, NULL, NewConnectionFlag | SendCircuitFlag );
  }
  catch( ... ) {
#ifdef CONTAINER_MULTI_THREADED
    m_mutex->unlock();
#endif
    throw;
  }

  // We will block here until the send circuit is ready
  while ( 1 ) {
    if ( send_circuit->ready() ) {
      send_circuit->initializeDataTransfers();
      break;
    }
    else {
      send_circuit->updateConnection( NULL, 0 );
    }
    // We need to make sure to give the transport time to perform
    // any houskeeping that it needs to do.
    m_transport->dispatch();

    OS::sleep(0);
    if (delay != 0) {
      timer.getValue(et);
      if (et > delay)
	return true;
    }
  }
#ifndef NDEBUG
  printf("Client side send circuit is ready\n");
#endif

  try {
    sprintf( cid, "%s-%d\n", m_end_point->end_point.c_str(), m_count++);
    rcv_circuit = m_transport->createCircuit( cid, rcv_md, NULL, NULL, NewConnectionFlag | RcvCircuitFlag  );
  }
  catch( ... ) {
#ifdef CONTAINER_MULTI_THREADED
    m_mutex->unlock();
#endif
    throw;
  }

  // We will block here until the rcv circuit is ready
  while ( 1 ) {
    if ( rcv_circuit->ready() ) {
      rcv_circuit->initializeDataTransfers();
      break;
    }
    else {
      rcv_circuit->updateConnection( NULL, 0 );
    }
    // We need to make sure to give the transport time to perform
    // any houskeeping that it needs to do.
    m_transport->dispatch();

    OS::sleep(0);
    if (delay != 0) {
      timer.getValue(et);
      if (et > delay)
	return true;
    }
  }
#ifndef NDEBUG
  printf("Client side recv circuit is ready\n");
#endif

  mc = new MessageCircuit( m_transport, send_circuit, rcv_circuit, m_mutex);
  m_circuits.push_back( mc );

#ifdef CONTAINER_MULTI_THREADED
  m_mutex->unlock();
#endif
  m_circuit = mc;
  return false;
}


/**********************************
 *  Dispatch control
 **********************************/
void Client::dispatch(DataTransfer::EventManager* eh)
{
#ifdef CONTAINER_MULTI_THREADED
  m_mutex->lock();
  m_transport->dispatch();
  m_mutex->unlock();
#else
  m_transport->dispatch( eh );
#endif
}


/**********************************
 *  Remove a message circuit
 **********************************/
void Client::remove( MessageCircuit* circuit )
{
        
#ifdef CONTAINER_MULTI_THREADED
  m_mutex->lock();
#endif

  m_circuits.remove( circuit );
  delete circuit;

#ifdef CONTAINER_MULTI_THREADED
  m_mutex->unlock();
#endif
  
}


        
/**********************************
 *  Destructor
 **********************************/
Client::~Client()
{
  // Shut down the thread
#ifdef CONTAINER_MULTI_THREADED
  m_mutex->lock();
#endif

  runThreadFlag = false;

#ifdef CONTAINER_MULTI_THREADED
  m_mutex->unlock();
#endif


#ifdef CONTAINER_MULTI_THREADED
  m_mutex->lock();
#endif


#ifdef CONTAINER_MULTI_THREADED
  m_transport_controller->join();
#endif


  /*
   * FP Note: Race condition here. The thread might still be blocked in
   * m_mutex->lock(), and will access the m_circuits list as soon as it
   * gets a chance.
   */
#ifdef CONTAINER_MULTI_THREADED
  m_mutex->lock();
#endif

  try {
    // Delete all of the circuits
    for (uint32_t n=0; n<m_circuits.getElementCount(); n++ ) {
      MessageCircuit* c = static_cast<MessageCircuit*>(m_circuits[n]);
      delete c;
    }

#ifdef CONTAINER_MULTI_THREADED
    delete m_transport_controller;
#endif

  }
  catch( ... ){}


#ifdef CONTAINER_MULTI_THREADED
  m_mutex->unlock();
  delete m_mutex;
#endif


}
        
