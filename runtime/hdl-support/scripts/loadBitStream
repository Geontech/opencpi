#!/bin/sh --noprofile
# This file is protected by Copyright. Please refer to the COPYRIGHT file
# distributed with this source distribution.
#
# This file is part of OpenCPI <http://www.opencpi.org>
#
# OpenCPI is free software: you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# OpenCPI is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

if [[ $# < 5 ]]; then
    cat <<EOF
Usage is: `basename $0` bit_file PCI_device platform part-name esn position
  An example is (for an ML555) is:
    loadBitStream testbias-ml555.bit.gz 0000:02:00.0 ml555 xc5vlx50t 0123456789abcd 2
  To find the HDL devices (available containers), use the "ocpihdl search" command.
     With ocpihdl, OpenCPI boards with valid bitstreams look like:
     Found an OpenOCPI FPGA at PCI 0000:04:00.0 ...
  Use "probeJtag" to find JTAG cable's USB port names, JTAG cable serial numbers, parts, and JTAG positions.
EOF
    exit 1
fi
#set -vx
bitfile=$1
device=$2
platform=$3
part=$4
esn=$5
position=$6
dir=`dirname $0`
if test "$position" = ""; then
  position=any
fi
temp=/tmp/ocpibitstream$$
tbar=$temp.1
tunzip=$temp.2
golden=/opt/opencpi/pci-config-snapshots/$device
pciDevice=`echo $device|sed s/PCI://`
if test "$OCPI_CDK_DIR" = ""; then
  echo Error: environment variable OCPI_CDK_DIR is not set.
  exit 1
fi
source $OCPI_CDK_DIR/scripts/ocpibootstrap.sh
if test "$OCPI_TOOL_DIR" = ""; then
  echo Error: environment variable OCPI_TOOL_DIR is not set.
  exit 1
fi
if test ! -x /sys/bus/pci/devices/$pciDevice; then
  echo Trying to load PCI device \"$device\" which does not exist.
  exit 1
fi
if test ! -r $bitfile; then
  echo Trying to load bit file \"$bitfile\", which does not exist or is not readable.
  exit 1
fi
source $OCPI_CDK_DIR/scripts/util.sh

# Here we have not checked the part or the position yet.
# Do more generic work that does not depend on the platform-specifics
echo Checking existing loaded bitstream on OpenCPI HDL device \"$device\"...
ocf="$OCPI_CDK_DIR/scripts/ocpisudo $OCPI_CDK_DIR/$OCPI_TOOL_DIR/bin/ocfrp_check"
$ocf $pciDevice
if test $? != 0; then
   echo Existing loaded bitstream on device \"$device\" does not appear to be functional.
   if test ! -f $golden; then
     echo There is no PCI configuration snapshot in \"$golden\" to restore.  Cannot continue.
     exit 1
   fi
   echo We will use the golden PCI configuration in $golden
else
   echo Existing loaded bitstream looks ok, proceeding to snapshot the PCI configuration \(into $tbar\).
   # This ensures the file is not created under sudo   
   echo > $tbar
   sudo cp /sys/bus/pci/devices/$pciDevice/config $tbar
   sudo chmod a+rw $tbar
   if test $? != 0; then
      echo Error: we could not snapshot the PCI configuration before loading.
      rm $tbar
      exit 1
   fi
#   echo PCI configuration for \"$device\" captured in \"$tbar\".
   golden=$tbar
fi

################################################################################
# Now we do the platform-specific part search to check that the part we want
# to load is at the proper place in the jtag chain
################################################################################

suffix=
case $bitfile in 
  (*.gz)
    # this might be an empty suffix
    suffix=`basename $bitfile .gz | sed 's/^.*\.//'`
    if test "$suffix" = ""; then
      echo Bit file ending in .gz must have a file extension before the .gz suffix.
      rm $tbar
      exit 1
    fi
    ;;       
  (*.bitz)
    suffix=bit
    ;;
esac
if test "$suffix" != ""; then
  echo The bitstream file \"$bitfile\" is compressed.  Expanding to temp file \"$temp.$suffix\".
  gunzip -q -c < $bitfile > $temp.$suffix 2> $tunzip
  # Note that gunzip issues warnings and returns status == 2 when there is
  # artifact metadata at the end of the file
  if test $? != 0 -a $? != 2; then
    echo Decompression failed: $(< $tunzip).
    rm -f $tbar $temp.$suffix $tunzip
    exit 1
  fi
  rm $tunzip
  bitfile=$temp.$suffix
fi
################################################################################
# Now we do platform-specific loading.  The "device" arg is unlikely to be used.
################################################################################
#echo Loading bitstream into device \"$device\" via jtag cable \"$cable\", serial number \"$serial\", at position \"$position\"...
#$jtagSupport load "$temp" "$cable" "$position" "$bitfile"
echo Loading bitstream 

/home/user/sidekiq_sdk_v4.4.0/test_apps/bin/store_user_fpga -c 0 -s "$bitfile" --reload -v

Err=$?
rm -f $temp.$suffix
if test $Err != 0; then
  echo Bitstream loading failed. PCI device may be unusable and system unstable.
  rm -f $tbar
  exit 1
fi
echo Bitstream loaded successfully, proceeding to restore PCI config \(from $golden\).
sleep 2
sudo cp $golden /sys/bus/pci/devices/$pciDevice/config
ex=$?
rm -f $tbar
if test $ex != 0; then
  echo Error: Restoration of PCI config failed.
  echo Error: May need to reset with post-reset PCI config snapshot
else
#  echo PCI Configuration restored, checking that new bitstream is ok.
  $ocf $pciDevice
  if  test $? = 0; then
    echo New bitstream is responding.  The loading process was successful.
  else
    echo Error: New bitstream is not responding.
    exit 1
  fi
fi
exit 0
