#!/bin/sh
# This file is protected by Copyright. Please refer to the COPYRIGHT file
# distributed with this source distribution.
#
# This file is part of OpenCPI <http://www.opencpi.org>
#
# OpenCPI is free software: you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# OpenCPI is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.


# A script shared by Xilinx platforms
# Args are:
# 0. Optional -v for verbose
# 1. The bitstream file to load to flash
# 2. The serial number of the jtag pod to use
# 3. The promgen args is one argument
dir=`dirname $0`
[ "$1" = -v ] && {
    verbose=1
    shift
}
if [[ $# != 3 ]]; then
  echo Usage is: `basename $0` bitfile jtag-esn 1>&2
  exit 1
fi
source $OCPI_CDK_DIR/scripts/util.sh
setVarsFromMake $OCPI_CDK_DIR/include/hdl/xilinx.mk ShellIseVars=1 $verbose
[ -z "$OcpiXilinxLabToolsDir" ] && {
  echo Error: Could not find the directory for XILINX LabTools or ISE.
  exit 1
}
source $OcpiXilinxLabToolsDir/../settings64.sh 1>&2
if test $? != 0; then
  echo Xilinx tools setup failed. 1>&2
  exit 1
fi
imp="$OcpiXilinxLabToolsDir/bin/lin64/impact"
if test ! -x $imp; then
  echo Error: Xilinx impact tool not found at $imp 1>&2
  exit 1
fi
pgen="$OcpiXilinxLabToolsDir/bin/lin64/promgen"
if test ! -x $imp; then
  echo Error: Xilinx promgen tool not found at $pgen 1>&2
  exit 1
fi
myusb=`$dir/findJtagByESN_xilinx $imp $2`
if test $? != 0; then
  echo Failed to find a JTAG USB Pod with ESN $2.
  exit 1;
fi
echo Found ESN $2 on "$myusb", using it.
temp=/tmp/ocpibitstream$$
tlog=$temp.1
function good {
  #rm -f $temp.*
  exit 0
}
function bad {
  echo Look at $temp.\* for details, then remove them.
  exit 1
}
case $1 in 
  (*.gz|*.bitz)
    echo The bitstream file \"$1\" is compressed.  Expanding it.
    gunzip -q -c < $1 > $temp.bit 2> $tlog
    # Note that gunzip issues warnings and returns status == 2 when there is
    # artifact metadata at end of file.
    if test $? != 0 -a $? != 2; then
      echo Decompression failed. Log is in $tlog; exit 1
      exit 1
    fi
    rm $temp.1
    echo Bitstream file decompressed into \"$temp.bit\"
    bitfile=$temp.bit
    ;;
  (*.bit)
    echo The bitstream file \"$1\" is not compressed.  Using it directly.
    bitfile=$5
    ;;
  (*)
    echo The bitstream file \"$1\" does not have a valid suffix "(.bit or .bitz)".
    exit 1
esac

echo Converting \"$bitfile\" to flash format in \"$temp.mcs\" using xilinx promgen tool.
echo Executing command: $pgen -w -p mcs -c FF $3 $bitfile
$pgen -w -p mcs -c FF $3 $bitfile >> $tlog 2>&1
if test $? != 0; then
  echo "Conversion to flash file format failed.  See log in $temp.2"
  bad
fi
# NOTE THIS IS PRETTY ML605 SPECIFIC.  We can parameterize when we know the next one.
echo Conversion to flash file format succeeded.  Starting flash programming.
echo This can take a while - 10-15 minutes.   Starting at `date +%T`.
time $imp -batch <<EOF >> $tlog 2>&1
setMode -bs
setCable -port $myusb
Identify -inferir 
identifyMPM 
attachflash -position 2 -bpi "XCF128X"
assignfiletoattachedflash -position 2 -file $temp.mcs
Program -p 2 -dataWidth 16 -rs1 NONE -rs0 NONE -bpionly -e -v -loadfpga 
EOF
if test $? != 0; then
  echo Flash programming had an error.
  bad
fi
echo Flash programming is complete.  You must power-cycle the system to use it.
echo Use the \"ocpihdl search\" command after power cycling to confirm success.
good
