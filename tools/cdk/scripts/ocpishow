#!/usr/bin/python
# This file is protected by Copyright. Please refer to the COPYRIGHT file
# distributed with this source distribution.
#
# This file is part of OpenCPI <http://www.opencpi.org>
#
# OpenCPI is free software: you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# OpenCPI is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

# TODO: integegrate more inline with ocpirun -A o get information instead of metadata file

import argparse
import subprocess
import os
import sys
import json
from lxml import etree as ET
import ocpiutil
from hdltargets import HdlToolSet, HdlTarget, HdlPlatform

subParserNouns = ["hdl", "rcc"]
plainNouns = ["workers", "components", "platforms", "targets"]
flatNouns = plainNouns
nounsList = plainNouns + subParserNouns
subnouns = {}
subnouns['hdl'] = ["targets", "platforms"]
subnouns['rcc'] = ["targets", "platforms"]

def parseCLVars():
    parser = argparse.ArgumentParser(description="Utility for showing available components, "
                                     + "workers, HDL/RCC Platforms and Targets available at "
                                     + "built time.")

    parser.add_argument("noun", type=str, help="This is either the noun to show or the " +
                        "authoring model to operate on. If choosing an authoring model " +
                        "(hdl/rcc), the platforms or targets nouns can follow.",
                        choices=nounsList)
    parser.add_argument("-v", "--verbose", action="store_true", help="Be verbose with output.")
    parser.add_argument("-d", dest="dir", default=os.path.curdir,
                        help="Change directory to the specified path " + "before proceeding. " +
                        "Changing directory may have no effect for some commands.")

    details_group = parser.add_mutually_exclusive_group()
    details_group.add_argument("--table", action="store_true", dest="table",
                               help="Pretty-print details in a table " +
                               "associated with the chosen noun")
    details_group.add_argument("--json", action="store_true", dest="json",
                               help="Print information in a json format")
    first_pass_args, remaining_args = parser.parse_known_args()
    if first_pass_args.noun in plainNouns:
        args = first_pass_args
        noun = first_pass_args.noun
    elif first_pass_args.noun in subParserNouns:
        subparser = argparse.ArgumentParser(description="Utility for showing available components, "
                                            + "workers, HDL/RCC Platforms and Targets available at "
                                            + "built time.")

        subparser.add_argument("subnoun", type=str, help="This is either the noun to show or the " +
                               "authoring model to operate on. If choosing an authoring model " +
                               "(hdl/rcc), the platforms or targets noun can follow.",
                               choices=subnouns[first_pass_args.noun])
        args = subparser.parse_args(remaining_args, namespace=first_pass_args)
        noun = first_pass_args.noun + args.subnoun

    return args, noun

def do_rccplatforms(options):
    """
    Print out the list of available RccPlatforms
    Without options this will just be a list.
    If the "table" option is provided, print out a formatted table of the platforms and targets.
    If the "json" option is provided, dump json output for the platform/target details.
    """
    rccDict = ocpiutil.get_make_vars_rcc_targets()
    try:
      rccPlatforms = rccDict["RccAllPlatforms"]
      rccTargets   = rccDict["RccAllTargets"]
    except TypeError:
        print "No RCC platforms found. Make sure the core project is registered or in your OCPI_PROJECT_PATH."
        return
    if options.table:
        rows = [["Platform", "Target"]]
        rows += [["---------", "---------"]]
        # Collect the information for each platform into a "row" list
        for platform, target in zip(rccPlatforms, rccTargets):
            platformRow = [platform, target]
            rows.append(platformRow)
        # Format the list of rows into a table and print
        ocpiutil.print_table(rows)
    elif options.json:
        platformDict = {}
        for platform, target in zip(rccPlatforms, rccTargets):
            platformDict[platform] = {"target": target}
        json.dump(platformDict, sys.stdout)
        print
    else:
        print ocpiutil.python_list_to_bash(rccDict["RccAllPlatforms"])

def do_rcctargets(options):
    """
    Print out the list of available RccTargets
    Without options this will just be a list.
    If the "table" option is provided, print out a formatted table of the platforms and targets.
    If the "json" option is provided, dump json output for the platform/target details.
    """
    if options.table or options.json:
        do_rccplatforms(options)
    else:
        rccDict = ocpiutil.get_make_vars_rcc_targets()
        try:
          print ocpiutil.python_list_to_bash(rccDict["RccAllTargets"])
        except TypeError:
            print "No RCC targets found. Make sure the core project is registered or in your OCPI_PROJECT_PATH."
            return


def do_hdlplatforms(options):
    """
    Print out the list of available HdlPlatforms.
    Without options, this will just be a list.
    If the "table" option is provided, print out a formatted table of the platforms an
    the details associated with each.
    If the "json" option is provided, dump json output for the platform details.
    """
    platforms = HdlPlatform.all()
    if options.table:
        rows = [["Platform", "Target", "Part", "Vendor", "Toolset"]]
        rows += [["---------", "---------", "---------", "---------", "---------"]]
        # Collect the information for each platform into a "row" list
        for platform in HdlPlatform.all():
            target = platform.target
            platformStr = platform.name
            if not platform.built:
                platformStr += '*'
            platformRow = [platformStr, str(target), platform.exactpart,
                           target.vendor, target.toolset.title]
            rows.append(platformRow)
        # Format the list of rows into a table and print
        ocpiutil.print_table(rows)
        print "* An asterisk indicates that the platform has not been built yet.\n" + \
              "  Assemblies and tests cannot be built until the platform is built."
    elif options.json:
        # Dump the json containing each platform's attributes
        platformDict = {}
        for platform in HdlPlatform.all():
            target = platform.target
            platformDict[platform.name] = {"target": target.name,
                                           "part": platform.exactpart,
                                           "vendor": target.vendor,
                                           "tool": target.toolset.title,
                                           "built": platform.built}
        json.dump(platformDict, sys.stdout)
        print
    else:
        print ocpiutil.python_list_to_bash(platforms)

def do_hdltargets(options):
    """
    Print out the list of available HdlTargets.
    Without options, this will just be a list.
    If the "dense" option is provided, print out an ugly but parsable list of targets and
    the details associated with each.
    If the "table" option is provided, print out a formatted table of the targets an
    the details associated with each.
    If the "json" option is provided, dump json output for the target details.
    """
    if options.table:
        rows = [["Target", "Parts", "Vendor", "Toolset"]]
        rows += [["---------", "---------", "---------", "---------"]]
        # Collect the information for each target into a "row" list
        for target in HdlTarget.all():
            targetRow = [str(target), ','.join(target.parts), target.vendor, target.toolset.title]
            rows.append(targetRow)
        ocpiutil.print_table(rows)
    elif options.json:
        # Dump the json containing each platform's attributes
        vendorDict = {}
        for vendor in HdlTarget.get_all_vendors():
            targetDict = {}
            for target in HdlTarget.get_all_targets_for_vendor(vendor):
                targetDict[target.name] = {"parts": target.parts,
                                           "tool": target.toolset.title}
            vendorDict[vendor] = targetDict
        json.dump(vendorDict, sys.stdout)
        print
    else:
        print ocpiutil.python_list_to_bash(HdlTarget.all())

def do_platforms(options):
    """
    Print out platforms for all authoring models
    """
    if not options.json:
        print "RCC:"
    do_rccplatforms(options)
    if not options.json:
        print "HDL:"
    do_hdlplatforms(options)

def do_targets(options):
    """
    Print out targets for all authoring models
    """
    if not options.json:
        print "RCC:"
    do_rcctargets(options)
    if not options.json:
        print "HDL:"
    do_hdltargets(options)

def do_workers(options):
    # TODO: regen project metadatas for all projects in proj path.
    mdFileList = ocpiutil.get_all_projects()
    #print mdFileList
    workList = ""
    for mdFile in mdFileList:
        mdFile = rchop(mdFile, '/')
        mdFile = rchop(mdFile, 'exports')
        subprocess.check_output([os.environ['OCPI_CDK_DIR']+"/scripts/genProjMetaData.py", mdFile])
        mdFile = mdFile + "/project.xml"
        workList = workList + get_tags(mdFile, "worker")
    print "Workers: " + workList

def rchop(thestring, ending):
    if thestring.endswith(ending):
        return thestring[:-len(ending)]
    return thestring

def get_tags(mdFile, tagName):
    #print "File is: " + mdFile
    retVal = ""
    if (os.path.isfile(mdFile)):
        tree = ET.parse(mdFile)
        for tag in tree.iter(tagName):
          retVal = retVal + " " + tag.get("name")
    return retVal

def do_components(options):
    # TODO: regen project metadatas for all projects in proj path.
    mdFileList = ocpiutil.get_all_projects()
    #print mdFileList
    compList = ""
    for mdFile in mdFileList:
        mdFile = rchop(mdFile, '/')
        mdFile = rchop(mdFile, 'exports')
        subprocess.check_output([os.environ['OCPI_CDK_DIR']+"/scripts/genProjMetaData.py", mdFile])
        mdFile = mdFile + "/project.xml"
        compList = compList + get_tags(mdFile, "spec")
    print "Components: " + compList
 
# main
(args, noun) = parseCLVars()

action = {"workers":      do_workers,
          "components":   do_components,
          "platforms":    do_platforms,
          "targets":      do_targets,
          "hdlplatforms": do_hdlplatforms,
          "hdltargets":   do_hdltargets,
          "rccplatforms": do_rccplatforms,
          "rcctargets":   do_rcctargets}
if args.verbose:
    print "ocpishow is processing noun \"" + str(noun) + "\" with options \"" + str(args) + "\""
with ocpiutil.cd(args.dir):
    # call the correct noun function
    action[noun](args)
